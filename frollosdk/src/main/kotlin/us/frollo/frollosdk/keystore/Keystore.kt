package us.frollo.frollosdk.keystore

import android.security.keystore.KeyGenParameterSpec
import android.security.keystore.KeyProperties
import android.util.Base64
import android.util.Log
import java.security.KeyStore
import javax.crypto.Cipher
import javax.crypto.KeyGenerator
import javax.crypto.SecretKey
import javax.crypto.spec.IvParameterSpec

class Keystore {

    companion object {
        private const val TAG = "Keystore"

        private const val KEY_ALIAS = "FrolloSDKKey"
        private const val KEYSTORE_PROVIDER = "AndroidKeyStore"
        private const val TRANSFORMATION_AES = "AES/CBC/PKCS7Padding"
    }

    // Random Initialization Vector generated by SecureRandom for AES/CBC - 16 bytes
    private val FIXED_IV = byteArrayOf(12, -18, 46, 125, -17, -120, -38, 79, 75, 93, -78, -31, -74, -35, -42, -70)

    private val mKeyStore = KeyStore.getInstance(KEYSTORE_PROVIDER)

    internal var isSetup = false

    internal fun setup() {
        try {
            mKeyStore.load(null)
            generateKeys()
            isSetup = true
        } catch (e: Exception) {
            Log.e("FrolloSDKLogger", "$TAG.setup : Error - Failed to load KeyStore")
        }
    }

    private fun generateKeys() {
        if (!mKeyStore.containsAlias(KEY_ALIAS)) aesKey()
    }

    internal fun encrypt(plainText: String?) =
            if (plainText?.isNotEmpty() == true) aesEncrypt(plainText) else null

    internal fun decrypt(cipherText: String?) =
            if (cipherText?.isNotEmpty() == true) aesDecrypt(cipherText) else null

    private fun aesKey() {
        try {
            val spec = KeyGenParameterSpec.Builder(KEY_ALIAS,
                    KeyProperties.PURPOSE_ENCRYPT or KeyProperties.PURPOSE_DECRYPT)
                    .setBlockModes(KeyProperties.BLOCK_MODE_CBC)
                    .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_PKCS7)
                    // Turn off use of random IV every time
                    .setRandomizedEncryptionRequired(false)
                    .build()

            // Initialize a Key generator using the the AES algorithm and KeyStore.
            val keyGenerator = KeyGenerator.getInstance(KeyProperties.KEY_ALGORITHM_AES, KEYSTORE_PROVIDER)
            keyGenerator.init(spec)
            keyGenerator.generateKey()
        } catch (e: Exception) {
            Log.e("FrolloSDKLogger", "$TAG.aesKey : Error - Keys creation failed")
        }
    }

    private fun aesEncrypt(inputStr: String?): String? {
        var encryptedStr: String? = null
        try {
            val secretKey = mKeyStore.getKey(KEY_ALIAS, null) as SecretKey

            val cipher = Cipher.getInstance(TRANSFORMATION_AES)
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, IvParameterSpec(FIXED_IV))

            val inputBuff = inputStr?.toByteArray(charset("UTF-8"))
            val encryptedData = cipher.doFinal(inputBuff)
            encryptedStr = Base64.encodeToString(encryptedData, Base64.DEFAULT)

        } catch (e: Exception) {
            Log.e("FrolloSDKLogger", "$TAG.aesEncrypt : Error - Data encryption failed")
        }
        return encryptedStr
    }

    private fun aesDecrypt(encryptedStr: String?): String? {
        var decryptedStr: String? = null
        try {
            val secretKey = mKeyStore?.getKey(KEY_ALIAS, null) as SecretKey

            val cipher = Cipher.getInstance(TRANSFORMATION_AES)
            cipher.init(Cipher.DECRYPT_MODE, secretKey, IvParameterSpec(FIXED_IV))

            val encryptedBuff = Base64.decode(encryptedStr, Base64.DEFAULT)
            val decryptedData = cipher.doFinal(encryptedBuff)
            decryptedStr = String(decryptedData, 0, decryptedData.size, charset("UTF-8"))

        } catch (e: Exception) {
            Log.e("FrolloSDKLogger", "$TAG.aesDecrypt : Error - Data decryption failed")
        }
        return decryptedStr
    }

    internal fun reset() {
        try {
            mKeyStore.deleteEntry(KEY_ALIAS)
            isSetup = false
        } catch (e: Exception) {
            Log.e("FrolloSDKLogger", "$TAG.reset : Error - Delete key failed")
        }
    }
}